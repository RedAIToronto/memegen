// New file for transaction logic















import { Transaction } from '@solana/web3.js';















import { getAssociatedTokenAddress, createTransferInstruction } from '@solana/spl-token';































// Add logging utility















const logTx = (stage, data) => {















  console.log(`ðŸ”„ [TX ${stage}]`, {















    timestamp: new Date().toISOString(),















    ...data















  });















};































export const handleTransaction = async ({















  connection,















  wallet,















  amount,















  tokenMint,















  treasuryWallet,















  onStatus,















  onError















}) => {















  try {















    logTx('START', { amount, wallet: wallet.publicKey.toString() });















    onStatus('Processing transaction...');































    const userTokenAccount = await getAssociatedTokenAddress(tokenMint, wallet.publicKey);















    const treasuryTokenAccount = await getAssociatedTokenAddress(tokenMint, treasuryWallet);















    















    logTx('ACCOUNTS', { 















      userTokenAccount: userTokenAccount.toString(),















      treasuryTokenAccount: treasuryTokenAccount.toString()















    });































    const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash('confirmed');















    















    let transaction = new Transaction();















    transaction.recentBlockhash = blockhash;















    transaction.feePayer = wallet.publicKey;































    // Add transfer instruction















    const transferInstruction = createTransferInstruction(















      userTokenAccount,















      treasuryTokenAccount,















      wallet.publicKey,















      amount















    );















    transaction.add(transferInstruction);































    logTx('SIGNING', { blockhash });















    const signed = await wallet.signTransaction(transaction);















    logTx('SIGNED', { signed: !!signed });















    const signature = await connection.sendRawTransaction(signed.serialize(), {















      skipPreflight: false,















      maxRetries: 5,















      preflightCommitment: 'confirmed'















    });















    logTx('SENT', { signature });















    // Wait for confirmation















    const { value } = await connection.confirmTransaction({















      signature,















      blockhash,















      lastValidBlockHeight















    }, 'confirmed');































    if (value?.err) {















      throw new Error('Transaction failed');















    }















    logTx('CONFIRMED', { signature });















    return signature;















  } catch (error) {















    logTx('ERROR', { error: error.message });















    onError(error);















    throw error;















  }















};































